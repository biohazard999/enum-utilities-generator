using EnumUtilitiesGenerator;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Shouldly;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Xunit;
using Xunit.Abstractions;

namespace SourceGeneratorTest.Tests
{
    public class EnumUtilitiesGeneratorTest
    {
        private readonly ITestOutputHelper _output;

        public EnumUtilitiesGeneratorTest(ITestOutputHelper output) => this._output = output ?? throw new ArgumentNullException(nameof(output));

        [Fact]
        public void Generator_Should_Generate_Attribute()
        {
            //in this case with no source, the attribute comes second
            var (extensionCode, attributeCode) = GetGeneratedOutput("");
            attributeCode.ShouldNotBeNull();
            extensionCode.ShouldBeEmpty();

            const string expectedAttributeCode = @"// <auto-generated />

using System;

namespace EnumUtilitiesGenerator.Attributes
{
    [AttributeUsage(AttributeTargets.Enum, AllowMultiple = false, Inherited = false)]
    public sealed class GenerateHelperAttribute : Attribute
    {
        public GenerateHelperAttribute(GenerateExtensionOption generationOption)
        {
            GenerationOption = generationOption;
        }

        public GenerateExtensionOption GenerationOption { get; }
    }

    public enum GenerateExtensionOption
    {
        IgnoreEnumWithoutDescription = 1,
        ThrowForEnumWithoutDescription = 2,
        UseItselfWhenNoDescription = 3
    }
}";
            
            attributeCode.ShouldBe(expectedAttributeCode);
        }

        [Fact]
        public void Enum_With_IgnoreEnumWithoutDescription_Should_Generate_Helper()
        {
            var source = @"
using EnumUtilitiesGenerator.Attributes;
using System.ComponentModel;

namespace SourceGeneratorTest.Console
{
    [GenerateHelper(GenerateExtensionOption.IgnoreEnumWithoutDescription)]
    public enum PaymentMethodIgnore
    {
        [Description(""Cartão de crédito"")]
        Credit,
        [Description(""Pix"")]
            Pix,

        [Description]
            Debit,

        Boleto,
        Dinheiro
    }
}";

            var (attributeCode, extensionCode) = GetGeneratedOutput(source);
            attributeCode.ShouldNotBeNullOrEmpty();
            extensionCode.ShouldNotBeNull();

            const string expectedGeneratedHelper = @"// <auto-generated />

namespace SourceGeneratorTest.Console
{
    public static class PaymentMethodIgnoreHelper
    {
        public static string GetDescriptionFast(this PaymentMethodIgnore @enum)
        {
            return @enum switch
            {
                PaymentMethodIgnore.Credit => ""Cartão de crédito"",
                PaymentMethodIgnore.Pix => ""Pix"",
                _ => null
            };
        }

        public static PaymentMethodIgnore? GetEnumFromDescriptionFast(string description)
        {
            return description.ToLower() switch
            {
                ""cartão de crédito"" => PaymentMethodIgnore.Credit,
                ""pix"" => PaymentMethodIgnore.Pix,
                _ => null
            };
        }
    }
}";
            extensionCode.ShouldBe(expectedGeneratedHelper);
        }

        [Fact]
        public void Enum_With_ThrowForEnumWithoutDescription_Should_Generate_Helper()
        {
            var source = @"
using EnumUtilitiesGenerator.Attributes;
using System.ComponentModel;

namespace SourceGeneratorTest.Console
{
    [GenerateHelper(GenerateExtensionOption.ThrowForEnumWithoutDescription)]
    public enum PaymentMethodThrow
    {
        [Description(""Cartão de crédito"")]
        Credit,
        [Description(""Pix"")]
            Pix,

        [Description]
            Debit,

        Boleto,
        Dinheiro
    }
}";

            var (attributeCode, extensionCode) = GetGeneratedOutput(source);
            attributeCode.ShouldNotBeNullOrEmpty();
            extensionCode.ShouldNotBeNull();
            
            const string expectedGeneratedHelper = @"// <auto-generated />

namespace SourceGeneratorTest.Console
{
    public static class PaymentMethodThrowHelper
    {
        public static string GetDescriptionFast(this PaymentMethodThrow @enum)
        {
            return @enum switch
            {
                PaymentMethodThrow.Credit => ""Cartão de crédito"",
                PaymentMethodThrow.Pix => ""Pix"",
                PaymentMethodThrow.Debit => throw new System.InvalidOperationException(""Description for member Debit was not found.""),
                PaymentMethodThrow.Boleto => throw new System.InvalidOperationException(""Description for member Boleto was not found.""),
                PaymentMethodThrow.Dinheiro => throw new System.InvalidOperationException(""Description for member Dinheiro was not found."")
            };
        }

        public static PaymentMethodThrow? GetEnumFromDescriptionFast(string description)
        {
            return description.ToLower() switch
            {
                ""cartão de crédito"" => PaymentMethodThrow.Credit,
                ""pix"" => PaymentMethodThrow.Pix,
                _ => throw new System.InvalidOperationException($""Enum for description '{description}' was not found."")
            };
        }
    }
}";

            extensionCode.ShouldBe(expectedGeneratedHelper);
        }

        [Fact]
        public void Enum_With_UseItselfWhenNoDescription_Should_Generate_Helper()
        {
            var source = @"
using EnumUtilitiesGenerator.Attributes;
using System.ComponentModel;

namespace SourceGeneratorTest.Console
{
    [GenerateHelper(GenerateExtensionOption.UseItselfWhenNoDescription)]
    public enum PaymentMethodUseItself
    {
        [Description(""Cartão de crédito"")]
        Credit,
        [Description(""Pix"")]
            Pix,

        [Description]
            Debit,

        Boleto,
        Dinheiro
    }
}";

            var (attributeCode, extensionCode) = GetGeneratedOutput(source);
            attributeCode.ShouldNotBeNullOrEmpty();
            extensionCode.ShouldNotBeNull();

            const string expectedGeneratedHelper = @"// <auto-generated />

namespace SourceGeneratorTest.Console
{
    public static class PaymentMethodUseItselfHelper
    {
        public static string GetDescriptionFast(this PaymentMethodUseItself @enum)
        {
            return @enum switch
            {
                PaymentMethodUseItself.Credit => ""Cartão de crédito"",
                PaymentMethodUseItself.Pix => ""Pix"",
                PaymentMethodUseItself.Debit => ""Debit"",
                PaymentMethodUseItself.Boleto => ""Boleto"",
                PaymentMethodUseItself.Dinheiro => ""Dinheiro""
            };
        }

        public static PaymentMethodUseItself? GetEnumFromDescriptionFast(string description)
        {
            return description.ToLower() switch
            {
                ""cartão de crédito"" => PaymentMethodUseItself.Credit,
                ""pix"" => PaymentMethodUseItself.Pix,
                ""debit"" => PaymentMethodUseItself.Debit,
                ""boleto"" => PaymentMethodUseItself.Boleto,
                ""dinheiro"" => PaymentMethodUseItself.Dinheiro
            };
        }
    }
}";

            extensionCode.ShouldBe(expectedGeneratedHelper);
        }

        private (string, string) GetGeneratedOutput(string source, bool executable = false)
        {
            var outputCompilation = CreateCompilation(source, executable);
            var trees = outputCompilation.SyntaxTrees.Reverse().Take(2).Reverse().ToList();
            foreach (var tree in trees)
            {
                _output.WriteLine(Path.GetFileName(tree.FilePath) + ":");
                _output.WriteLine(tree.ToString());
            }
            return (trees.First().ToString(), trees[1].ToString());
        }

        private static Compilation CreateCompilation(string source, bool executable)
        {
            var syntaxTree = CSharpSyntaxTree.ParseText(source);

            var references = new List<MetadataReference>();
            foreach (var assembly in AppDomain.CurrentDomain.GetAssemblies())
                if (!assembly.IsDynamic && !string.IsNullOrWhiteSpace(assembly.Location))
                    references.Add(MetadataReference.CreateFromFile(assembly.Location));

            var compilation = CSharpCompilation.Create("Foo",
                                                       new SyntaxTree[] { syntaxTree },
                                                       references,
                                                       new CSharpCompilationOptions(executable ? OutputKind.ConsoleApplication : OutputKind.DynamicallyLinkedLibrary));

            var generator = new EnumHelperGenerator();

            var driver = CSharpGeneratorDriver.Create(generator);
            driver.RunGeneratorsAndUpdateCompilation(compilation, out var outputCompilation, out var generateDiagnostics);

            var compileDiagnostics = outputCompilation.GetDiagnostics();
            compileDiagnostics.Any(d => d.Severity == DiagnosticSeverity.Error).ShouldBeFalse("Failed: " + compileDiagnostics.FirstOrDefault()?.GetMessage());

            generateDiagnostics.Any(d => d.Severity == DiagnosticSeverity.Error).ShouldBeFalse("Failed: " + generateDiagnostics.FirstOrDefault()?.GetMessage());
            return outputCompilation;
        }
    }
}
